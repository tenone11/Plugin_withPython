import pymel.core as pm
import re,os
DefaultPath = 'D:\\bake\\low\\'

def ExecuteExport(yourPath):
    #add FBX into newArray and avoid FBXs export to one FBX
    FBXarray = []
    _des_path = ''
    for i in pm.selected():
        if i.getShape().nodeType() == 'mesh':   # just get mesh
            FBXarray.append(i)
    pm.select(clear=True)

    #Set FBX configs
    pm.other.FBXResetExport()
    pm.other.FBXExportSmoothingGroups('-v', True)
    pm.other.FBXExportLights('-v', False)
    pm.other.FBXExportTriangulate('-v', False)
    pm.other.FBXExportSmoothMesh('-v', False)
    pm.other.FBXExportTangents('-v',False)
    pm.other.FBXExportFileVersion('-v', 'FBX201300')
    FBXAddress = []
    for x in FBXarray:
        meshname = x.name()
        if re.search(':', meshname) != None: # Check FBX name contain ':'
            meshname = re.sub(':', '_',meshname)
        _des_path = yourPath + meshname + '.fbx'
        pm.select(x)
        pm.other.FBXExport('-f', _des_path, '-s')
        FBXAddress.append(_des_path)
    return FBXAddress

#Create GUI
from PySide2 import QtCore, QtGui, QtWidgets
from PySide2.QtWidgets import QWidget, QPushButton, QApplication

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(464, 77)
        Dialog.setProperty("Pushit", False)
        self.verticalLayoutWidget = QtWidgets.QWidget(Dialog)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 441, 51))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton.setCheckable(False)
        self.pushButton.setAutoDefault(False)
        self.pushButton.setDefault(False)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton.clicked.connect(self.ClickedEvent)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        Dialog.setWindowTitle(QtWidgets.QApplication.translate("Dialog", "EGC_ExportFBX", None, -1))
        self.label.setText(QtWidgets.QApplication.translate("Dialog", "ExportFBX_Path:", None, -1))
        self.lineEdit.setText(QtWidgets.QApplication.translate("Dialog", DefaultPath, None, -1))
        self.pushButton.setText(QtWidgets.QApplication.translate("Dialog", "Export", None, -1))
        self.label_2.setText(QtWidgets.QApplication.translate("Dialog", 'Status: Ready to export', None, -1))

    def ClickedEvent(self):
        Des_path = self.lineEdit.displayText()
        if pm.selected() == []:
            self.label_2.setStyleSheet("color:red")
            self.label_2.setText('Status: Please choose mesh first')
        elif os.path.exists(Des_path) == False:
            os.makedirs(Des_path)
        else:
            configini = "D:\\EGC_Plugins\\EGC_configs.py"
            out_file = open(configini, 'w')
            yourFile = ExecuteExport(Des_path)
            self.label_2.setStyleSheet("color:green")
            self.label_2.setText('Success %s' % yourFile)
            out_file.write('MayaToUnreal = True')
            out_file.write("\nMayaExportedFile = %s" % yourFile)
            out_file.close()

if __name__ == '__main__':
    MainWindow = QtWidgets.QMainWindow()
    MainWindow.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
    ui = Ui_Dialog()
    ui.setupUi(MainWindow)
    MainWindow.show()
